{
  "title": "Квиз по мапам в Go",
  "questions": [
    {
      "question": "Что такое мапа в Go?",
      "answers": [
        "Динамическая структура для хранения элементов фиксированной длины",
        "Структура для хранения пар ключ-значение с уникальными ключами",
        "Список элементов одного типа с доступом по индексу",
        "Динамический массив с автоматическим расширением"
      ],
      "correctAnswerId": 1,
      "explanation": "Мапа в Go — это структура данных для хранения пар ключ-значение, где ключи уникальны. Она не упорядочена и не индексируется, как массив или слайс."
    },
    {
      "question": "Как объявить пустую мапу в Go?",
      "answers": [
        "var m map[string]int",
        "var m map[string]int{}",
        "var m []map[string]int",
        "var m map[string]int = {}"
      ],
      "correctAnswerId": 0,
      "explanation": "Правильный синтаксис: `var m map[string]int`. Это объявляет мапу, но она будет `nil`, пока не инициализирована с помощью `make` или литерала."
    },
    {
      "question": "Что произойдет, если попытаться записать значение в неинициализированную мапу?",
      "answers": [
        "Мапа автоматически инициализируется",
        "Произойдет паника",
        "Значение будет проигнорировано",
        "Мапа станет пустой"
      ],
      "correctAnswerId": 1,
      "explanation": "Неинициализированная мапа (`var m map[string]int`) — это `nil`. Попытка записи вызовет панику: `panic: assignment to entry in nil map`."
    },
    {
      "question": "Как правильно инициализировать мапу?",
      "answers": [
        "m := map[string]int()",
        "m := make(map[string]int)",
        "m := new(map[string]int)",
        "m := map[string]int{new}"
      ],
      "correctAnswerId": 1,
      "explanation": "`make(map[string]int)` — правильный способ инициализации мапы. `new` создает указатель, а другие варианты синтаксически неверны."
    },
    {
      "question": "Какой тип ключа НЕ может быть использован в мапе?",
      "answers": [
        "int",
        "string",
        "slice",
        "struct"
      ],
      "correctAnswerId": 2,
      "explanation": "Ключи в мапе должны быть сравниваемыми (поддерживать оператор `==`). Слайсы, мапы и функции не сравниваемы, поэтому их нельзя использовать как ключи."
    },

    {
      "question": "Как добавить элемент в мапу?",
      "answers": [
        "m.append(\"key\", 1)",
        "m[\"key\"] = 1",
        "m.add(\"key\", 1)",
        "m.insert(\"key\", 1)"
      ],
      "correctAnswerId": 1,
      "explanation": "Для добавления элемента в мапу используется синтаксис `m[\"key\"] = 1`. Другие методы, такие как `append` или `insert`, для мап не существуют."
    },
    {
      "question": "Как проверить, существует ли ключ в мапе?",
      "answers": [
        "val := m[\"key\"]; val != nil",
        "val, ok := m[\"key\"]; ok",
        "val := m[\"key\"]; val != 0",
        "if m.contains(\"key\")"
      ],
      "correctAnswerId": 1,
      "explanation": "Правильный способ: `val, ok := m[\"key\"]; ok`. Переменная `ok` будет `true`, если ключ существует, и `false`, если нет."
    },
    {
      "question": "Что вернет `val, ok := m[\"key\"]` для несуществующего ключа?",
      "answers": [
        "val будет nil, ok будет true",
        "val будет нулевым значением типа, ok будет false",
        "val будет 0, ok будет true",
        "val будет пустым, ok будет nil"
      ],
      "correctAnswerId": 1,
      "explanation": "Для несуществующего ключа `val` будет нулевым значением типа (например, 0 для `int`), а `ok` будет `false`."
    },
    {
      "question": "Как удалить элемент из мапы?",
      "answers": [
        "m.remove(\"key\")",
        "delete(m, \"key\")",
        "m.delete(\"key\")",
        "remove(m[\"key\"])"
      ],
      "correctAnswerId": 1,
      "explanation": "Для удаления элемента используется встроенная функция `delete(m, \"key\")`. Другие варианты не существуют в Go."
    },
    {
      "question": "Что произойдет, если вызвать `delete` для несуществующего ключа?",
      "answers": [
        "Произойдет паника",
        "Мапа очистится",
        "Ничего не произойдет",
        "Ключ будет создан с нулевым значением"
      ],
      "correctAnswerId": 2,
      "explanation": "`delete` для несуществующего ключа безопасен и не вызывает никаких изменений или ошибок."
    },

    {
      "question": "В каком порядке итерируются элементы мапы в цикле `for range`?",
      "answers": [
        "В порядке добавления",
        "В алфавитном порядке ключей",
        "В случайном порядке",
        "В порядке значений"
      ],
      "correctAnswerId": 2,
      "explanation": "Мапы в Go не упорядочены, и итерация через `for range` происходит в случайном порядке, чтобы предотвратить зависимость от порядка."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[string]int{\"a\": 1, \"b\": 2}\n    for k, v := range m {\n        fmt.Println(k, v)\n    }\n}",
      "answers": [
        "a 1\nb 2",
        "b 2\na 1",
        "Порядок случайный",
        "Паника"
      ],
      "correctAnswerId": 2,
      "explanation": "Порядок итерации по мапе случайный, поэтому вывод может быть как `a 1\nb 2`, так и `b 2\na 1`."
    },
    {
      "question": "Как получить количество элементов в мапе?",
      "answers": [
        "m.len()",
        "len(m)",
        "m.size()",
        "size(m)"
      ],
      "correctAnswerId": 1,
      "explanation": "Функция `len(m)` возвращает количество пар ключ-значение в мапе. Другие варианты не существуют."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := make(map[string]int)\n    m[\"a\"] = 1\n    fmt.Println(len(m))\n}",
      "answers": [
        "0",
        "1",
        "2",
        "Паника"
      ],
      "correctAnswerId": 1,
      "explanation": "После добавления одного элемента в мапу, `len(m)` вернет 1."
    },
    {
      "question": "Можно ли использовать мапу как ключ в другой мапе?",
      "answers": [
        "Да, если мапа не пустая",
        "Нет, мапы нельзя использовать как ключи",
        "Да, если мапа инициализирована",
        "Да, но только с помощью указателя"
      ],
      "correctAnswerId": 1,
      "explanation": "Мапы нельзя использовать как ключи, так как они не сравниваемы (не поддерживают оператор `==`)."
    },

    {
      "question": "Как передается мапа в функцию?",
      "answers": [
        "По значению, создавая копию",
        "По ссылке, но копируя содержимое",
        "По значению, но ссылаясь на те же данные",
        "По указателю, всегда"
      ],
      "correctAnswerId": 2,
      "explanation": "Мапа передается по значению, но ее внутренняя структура содержит указатель на данные, поэтому изменения в функции отражаются на оригинале."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc modify(m map[string]int) {\n    m[\"a\"] = 10\n}\n\nfunc main() {\n    m := make(map[string]int)\n    m[\"a\"] = 1\n    modify(m)\n    fmt.Println(m[\"a\"])\n}",
      "answers": [
        "1",
        "10",
        "0",
        "Паника"
      ],
      "correctAnswerId": 1,
      "explanation": "Мапа ссылается на те же данные, поэтому изменение в функции `modify` меняет оригинал. Вывод: `10`."
    },
    {
      "question": "Что произойдет, если передать nil-мапу в функцию и попытаться добавить элемент?",
      "answers": [
        "Мапа станет пустой",
        "Произойдет паника",
        "Элемент добавится",
        "Функция проигнорирует операцию"
      ],
      "correctAnswerId": 1,
      "explanation": "Попытка записи в nil-мапу вызовет панику: `panic: assignment to entry in nil map`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    var m map[string]int\n    fmt.Println(m[\"key\"])\n}",
      "answers": [
        "0",
        "nil",
        "Паника",
        "Пустая строка"
      ],
      "correctAnswerId": 0,
      "explanation": "Чтение из nil-мапы безопасно и возвращает нулевое значение типа (для `int` это 0)."
    },
    {
      "question": "Можно ли сравнивать две мапы с помощью оператора `==`?",
      "answers": [
        "Да, если они одного типа",
        "Нет, мапы нельзя сравнивать",
        "Да, но только если они пустые",
        "Да, если они инициализированы"
      ],
      "correctAnswerId": 1,
      "explanation": "Мапы нельзя сравнивать с помощью `==`, так как они не поддерживают оператор сравнения. Можно сравнивать только с `nil`."
    },

    {
      "question": "Что произойдет, если попытаться итерировать по nil-мапе?",
      "answers": [
        "Произойдет паника",
        "Цикл выполнится 0 раз",
        "Будет выведено нулевое значение",
        "Мапа инициализируется"
      ],
      "correctAnswerId": 1,
      "explanation": "Итерация по nil-мапе безопасна, цикл просто не выполнится, так как мапа считается пустой."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[string]int{\"a\": 1}\n    delete(m, \"b\")\n    fmt.Println(len(m))\n}",
      "answers": [
        "0",
        "1",
        "2",
        "Паника"
      ],
      "correctAnswerId": 1,
      "explanation": "`delete` для несуществующего ключа ничего не делает. В мапе остается 1 элемент, вывод: `1`."
    },
    {
      "question": "Что произойдет, если попытаться использовать слайс как ключ в мапе?",
      "answers": [
        "Слайс будет преобразован в строку",
        "Произойдет ошибка компиляции",
        "Слайс будет проигнорирован",
        "Мапа примет слайс как ключ"
      ],
      "correctAnswerId": 1,
      "explanation": "Слайсы нельзя использовать как ключи, так как они не сравниваемы. Компилятор выдаст ошибку: `invalid map key type`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[int]int{1: 10, 2: 20}\n    m2 := m\n    m2[1] = 100\n    fmt.Println(m[1])\n}",
      "answers": [
        "10",
        "100",
        "0",
        "Паника"
      ],
      "correctAnswerId": 1,
      "explanation": "Обе мапы ссылаются на те же данные, изменение в `m2` меняет и `m`. Вывод: `100`."
    },
    {
      "question": "Можно ли использовать указатель на мапу как ключ в другой мапе?",
      "answers": [
        "Да, указатели сравниваемы",
        "Нет, указатели нельзя использовать",
        "Да, но только с помощью преобразования",
        "Нет, указатели не поддерживают `==`"
      ],
      "correctAnswerId": 0,
      "explanation": "Указатели сравниваемы в Go, поэтому их можно использовать как ключи в мапе."
    },

    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[string]int{\"a\": 1, \"b\": 2}\n    fmt.Println(m[\"c\"])\n}",
      "answers": [
        "0",
        "nil",
        "Паника",
        "2"
      ],
      "correctAnswerId": 0,
      "explanation": "Чтение несуществующего ключа возвращает нулевое значение типа (для `int` это 0)."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := make(map[int]bool)\n    m[1] = true\n    if m[2] {\n        fmt.Println(\"true\")\n    } else {\n        fmt.Println(\"false\")\n    }\n}",
      "answers": [
        "true",
        "false",
        "Паника",
        "Ничего не выведет"
      ],
      "correctAnswerId": 1,
      "explanation": "Ключ `2` не существует, `m[2]` вернет `false` (нулевое значение для `bool`). Вывод: `false`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := map[string]int{\"a\": 1}\n    m2 := map[string]int{\"a\": 1}\n    fmt.Println(m == m2)\n}",
      "answers": [
        "true",
        "false",
        "Паника",
        "Ошибка компиляции"
      ],
      "correctAnswerId": 3,
      "explanation": "Мапы нельзя сравнивать с помощью `==`, это вызовет ошибку компиляции: `invalid operation: m == m2`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    var m map[string]int\n    fmt.Println(m == nil)\n}",
      "answers": [
        "true",
        "false",
        "Паника",
        "0"
      ],
      "correctAnswerId": 0,
      "explanation": "Неинициализированная мапа — это `nil`, поэтому сравнение с `nil` вернет `true`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    m := make(map[string]int)\n    m[\"a\"] = 1\n    m = nil\n    fmt.Println(len(m))\n}",
      "answers": [
        "1",
        "0",
        "Паника",
        "nil"
      ],
      "correctAnswerId": 1,
      "explanation": "После присваивания `nil` мапа становится nil-мапой, и `len(m)` возвращает 0."
    }
  ]
}
