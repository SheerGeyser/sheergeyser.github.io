{
  "title": "Квиз по массивам и слайсам в Go",
  "questions": [
    {
      "question": "Что такое массив в Go?",
      "answers": ["Динамическая структура данных", "Набор элементов фиксированной длины", "Список ссылок", "Ассоциативный массив"],
      "correctAnswerId": 1,
      "explanation": "Массив в Go — это набор элементов одного типа с фиксированной длиной, заданной при объявлении."
    },
    {
      "question": "Как объявить массив из 5 целых чисел в Go?",
      "answers": ["var arr [5]int", "var arr []int", "var arr [5]int{}", "var arr {5]int"],
      "correctAnswerId": 0,
      "explanation": "Правильный синтаксис: `var arr [5]int` — массив из 5 целых чисел."
    },
    {
      "question": "Что произойдет, если попытаться обратиться к элементу массива за его пределами?",
      "answers": ["Паника", "Возвращается nil", "Автоматическое расширение массива", "Возвращается 0"],
      "correctAnswerId": 0,
      "explanation": "Обращение за пределы массива вызовет панику `index out of range`."
    },
    {
      "question": "Какой будет результат выполнения: `arr := [3]int{1, 2, 3}; arr[1] = 5`?",
      "answers": ["[1, 5, 3]", "[5, 2, 3]", "[1, 2, 5]", "Ошибка"],
      "correctAnswerId": 0,
      "explanation": "Элемент с индексом 1 будет заменен на 5, итоговый массив: `[1, 5, 3]`."
    },
    {
      "question": "Можно ли изменить длину массива после его объявления?",
      "answers": ["Да", "Нет", "Только с помощью append", "Только при копировании"],
      "correctAnswerId": 1,
      "explanation": "Массивы в Go имеют фиксированную длину, которая не может быть изменена."
    },
    {
      "question": "Что такое слайс в Go?",
      "answers": ["Массив фиксированной длины", "Динамическая обертка над массивом", "Ассоциативный массив", "Набор указателей"],
      "correctAnswerId": 1,
      "explanation": "Слайс — это динамическая структура, которая является оберткой над массивом с изменяемой длиной."
    },
    {
      "question": "Как объявить пустой слайс в Go?",
      "answers": ["var s []int", "var s [0]int", "var s []int{}", "var s [int]"],
      "correctAnswerId": 0,
      "explanation": "Пустой слайс объявляется как `var s []int`. Отсутствие длины в квадратных скобках указывает на слайс."
    },
    {
      "question": "Что возвращает функция `len()` для слайса?",
      "answers": ["Емкость слайса", "Количество элементов в слайсе", "Размер базового массива", "Максимальный индекс"],
      "correctAnswerId": 1,
      "explanation": "`len()` возвращает текущее количество элементов в слайсе."
    },
    {
      "question": "Что возвращает функция `cap()` для слайса?",
      "answers": ["Количество элементов", "Емкость базового массива", "Размер в байтах", "Максимальный индекс"],
      "correctAnswerId": 1,
      "explanation": "`cap()` возвращает емкость базового массива, начиная с первого элемента слайса."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s = append(s, 4)`?",
      "answers": ["[1, 2, 3]", "[1, 2, 3, 4]", "[4, 1, 2, 3]", "Ошибка"],
      "correctAnswerId": 1,
      "explanation": "`append` добавляет элемент в конец слайса, результат: `[1, 2, 3, 4]`."
    },
    {
      "question": "В чем основное различие между массивом и слайсом в Go?",
      "answers": ["Массив динамический, слайс фиксированный", "Слайс динамический, массив фиксированный", "Массив передается по ссылке, слайс по значению", "Слайс не может быть пустым"],
      "correctAnswerId": 1,
      "explanation": "Массив имеет фиксированную длину, а слайс — динамическую, с возможностью расширения."
    },
    {
      "question": "Как передаются массивы в функции в Go?",
      "answers": ["По ссылке", "По значению", "Как указатель", "Зависит от размера"],
      "correctAnswerId": 1,
      "explanation": "Массивы передаются по значению, создавая копию."
    },
    {
      "question": "Как передаются слайсы в функции в Go?",
      "answers": ["По значению", "По ссылке", "Как копия массива", "Зависит от размера"],
      "correctAnswerId": 0,
      "explanation": "Слайсы передаются по значению, но их структура содержит указатель на базовый массив, что позволяет изменять данные."
    },
    {
      "question": "Что произойдет, если передать массив в функцию и изменить его внутри?",
      "answers": ["Изменится оригинал", "Изменится копия", "Произойдет паника", "Ничего не изменится"],
      "correctAnswerId": 1,
      "explanation": "Массив передается по значению, поэтому изменения затронут только копию."
    },
    {
      "question": "Что произойдет, если передать слайс в функцию и изменить его элементы внутри?",
      "answers": ["Изменится оригинал", "Изменится копия", "Произойдет паника", "Ничего не изменится"],
      "correctAnswerId": 0,
      "explanation": "Слайс ссылается на базовый массив, поэтому изменения элементов затронут оригинал."
    },
    {
      "question": "Что произойдет, если выполнить `s := []int{}; s[0] = 1`?",
      "answers": ["Добавится элемент", "Произойдет паника", "Слайс расширится", "Значение изменится"],
      "correctAnswerId": 1,
      "explanation": "Слайс пустой, обращение к `s[0]` вызовет панику `index out of range`."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s2 := s[1:3]`?",
      "answers": ["[1, 2]", "[2, 3]", "[1, 2, 3]", "[3]"],
      "correctAnswerId": 1,
      "explanation": "Срез `s[1:3]` берет элементы с индекса 1 по 2 (3 не включается): `[2, 3]`."
    },
    {
      "question": "Что произойдет, если выполнить `s := make([]int, 3, 5); s = append(s, 1, 2, 3)`?",
      "answers": ["Паника", "Слайс станет [0, 0, 0, 1, 2, 3]", "Слайс станет [1, 2, 3]", "Слайс станет [0, 0, 0, 1, 2]"],
      "correctAnswerId": 1,
      "explanation": "`make([]int, 3, 5)` создает слайс длиной 3 и емкостью 5, `append` добавляет элементы, итог: `[0, 0, 0, 1, 2, 3]`."
    },
    {
      "question": "Что произойдет, если емкость слайса превышена при вызове `append`?",
      "answers": ["Паника", "Слайс обрежется", "Создастся новый базовый массив", "Ничего не произойдет"],
      "correctAnswerId": 2,
      "explanation": "Go создаст новый базовый массив с увеличенной емкостью и скопирует данные."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s2 := s; s2[0] = 5`?",
      "answers": ["s: [1, 2, 3], s2: [5, 2, 3]", "s: [5, 2, 3], s2: [5, 2, 3]", "s: [1, 2, 3], s2: [1, 2, 3]", "Паника"],
      "correctAnswerId": 1,
      "explanation": "Оба слайса ссылаются на один базовый массив, изменение в `s2` меняет и `s`."
    },
    {
      "question": "Что произойдет, если передать слайс в функцию и вызвать `append` внутри?",
      "answers": ["Оригинал всегда изменится", "Оригинал может не измениться", "Произойдет паника", "Оригинал обнулится"],
      "correctAnswerId": 1,
      "explanation": "Если `append` создает новый базовый массив (при превышении емкости), оригинал не изменится."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s2 := s[0:2]; s2 = append(s2, 4)`?",
      "answers": ["s: [1, 2, 4], s2: [1, 2, 4]", "s: [1, 2, 3], s2: [1, 2, 4]", "s: [1, 2, 3, 4], s2: [1, 2, 4]", "Паника"],
      "correctAnswerId": 0,
      "explanation": "Оба слайса ссылаются на один массив, `append` к `s2` перезапишет третий элемент в `s`."
    },
    {
      "question": "Что произойдет, если выполнить `var s []int; s = s[0:1]`?",
      "answers": ["Слайс станет [0]", "Произойдет паника", "Слайс станет пустым", "Слайс станет nil"],
      "correctAnswerId": 1,
      "explanation": "Слайс `s` — nil, попытка среза вызовет панику `slice bounds out of range`."
    },
    {
      "question": "Какой будет результат: `arr := [3]int{1, 2, 3}; s := arr[:]; s[0] = 5`?",
      "answers": ["arr: [1, 2, 3], s: [5, 2, 3]", "arr: [5, 2, 3], s: [5, 2, 3]", "arr: [1, 2, 3], s: [1, 2, 3]", "Паника"],
      "correctAnswerId": 1,
      "explanation": "Слайс `s` ссылается на массив `arr`, изменение в `s` меняет и `arr`."
    },
    {
      "question": "Что произойдет, если выполнить `s := make([]int, 0); s[0] = 1`?",
      "answers": ["Слайс станет [1]", "Произойдет паника", "Слайс расширится", "Значение изменится"],
      "correctAnswerId": 1,
      "explanation": "Слайс имеет длину 0, обращение к `s[0]` вызовет панику `index out of range`."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s2 := make([]int, len(s)); copy(s2, s)`?",
      "answers": ["s2: [1, 2, 3]", "s2: [0, 0, 0]", "s2: []", "Паника"],
      "correctAnswerId": 0,
      "explanation": "`copy` копирует элементы из `s` в `s2`, итог: `s2: [1, 2, 3]`."
    },
    {
      "question": "Что произойдет, если вызвать `copy` с слайсами разной длины?",
      "answers": ["Паника", "Копируется меньшее количество элементов", "Копирование не произойдет", "Автоматическое расширение"],
      "correctAnswerId": 1,
      "explanation": "`copy` копирует столько элементов, сколько помещается в целевой слайс."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s = s[:0]; fmt.Println(len(s))`?",
      "answers": ["0", "3", "1", "Паника"],
      "correctAnswerId": 0,
      "explanation": "Срез `s[:0]` обрезает слайс до длины 0, но сохраняет емкость."
    },
    {
      "question": "Что произойдет, если выполнить `var arr [3]int; arr = append(arr, 1)`?",
      "answers": ["Массив станет [0, 0, 0, 1]", "Произойдет ошибка компиляции", "Массив станет [1, 0, 0]", "Паника"],
      "correctAnswerId": 1,
      "explanation": "`append` работает только со слайсами, для массива это вызовет ошибку компиляции."
    },
    {
      "question": "Какой будет результат: `s := []int{1, 2, 3}; s = nil; fmt.Println(len(s))`?",
      "answers": ["0", "3", "Паника", "nil"],
      "correctAnswerId": 0,
      "explanation": "После присваивания `nil` слайс становится nil-слайсом, его длина — 0."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    arr := [3]int{1, 2, 3}\n    arr2 := arr\n    arr2[0] = 5\n    fmt.Println(arr)\n}",
      "answers": ["[5, 2, 3]", "[1, 2, 3]", "Паника", "[0, 0, 0]"],
      "correctAnswerId": 1,
      "explanation": "Массивы передаются по значению, поэтому `arr2` — это копия `arr`. Изменение `arr2` не влияет на `arr`, вывод: `[1, 2, 3]`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    s := []int{1, 2, 3}\n    s2 := s\n    s2[1] = 5\n    fmt.Println(s)\n}",
      "answers": ["[1, 2, 3]", "[1, 5, 3]", "Паника", "[5, 2, 3]"],
      "correctAnswerId": 1,
      "explanation": "Слайсы ссылаются на один базовый массив, изменение `s2` меняет и `s`, вывод: `[1, 5, 3]`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    s := []int{1, 2, 3, 4, 5}\n    s2 := s[1:4]\n    fmt.Println(len(s2), cap(s2))\n}",
      "answers": ["3 4", "4 5", "3 5", "2 3"],
      "correctAnswerId": 0,
      "explanation": "Срез `s[1:4]` имеет длину 3 (элементы с индекса 1 по 3). Емкость — 4, так как базовый массив начинается с индекса 1 и до конца (5 - 1 = 4). Вывод: `3 4`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    s := make([]int, 2, 5)\n    s[0], s[1] = 1, 2\n    s = append(s, 3)\n    fmt.Println(s)\n}",
      "answers": ["[1, 2, 3]", "[0, 0, 3]", "Паника", "[1, 2]"],
      "correctAnswerId": 0,
      "explanation": "`make([]int, 2, 5)` создает слайс длиной 2 и емкостью 5. После присваивания `s[0] = 1`, `s[1] = 2` и `append(s, 3)`, слайс становится `[1, 2, 3]`."
    },
    {
      "question": "Что произойдет при выполнении следующего кода?",
      "code": "package main\n\nfunc main() {\n    var s []int\n    s[0] = 1\n}",
      "answers": ["Слайс станет [1]", "Произойдет паника", "Слайс расширится", "Ничего не произойдет"],
      "correctAnswerId": 1,
      "explanation": "`s` — nil-слайс, попытка обращения к `s[0]` вызовет панику `index out of range`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc modify(s []int) {\n    s = append(s, 4)\n}\n\nfunc main() {\n    s := []int{1, 2, 3}\n    modify(s)\n    fmt.Println(s)\n}",
      "answers": ["[1, 2, 3, 4]", "[1, 2, 3]", "Паника", "[4, 1, 2, 3]"],
      "correctAnswerId": 1,
      "explanation": "`append` в функции `modify` создает новый слайс, но не меняет оригинальный `s`, так как `s` в функции — это копия. Вывод: `[1, 2, 3]`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    s := []int{1, 2, 3, 4, 5}\n    s2 := s[2:]\n    s2[0] = 10\n    fmt.Println(s)\n}",
      "answers": ["[1, 2, 3, 4, 5]", "[1, 2, 10, 4, 5]", "Паника", "[1, 2, 3, 10, 5]"],
      "correctAnswerId": 1,
      "explanation": "Срез `s2 := s[2:]` ссылается на тот же базовый массив, начиная с индекса 2. Изменение `s2[0]` (то есть `s[2]`) меняет `s`. Вывод: `[1, 2, 10, 4, 5]`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    s := make([]int, 0, 3)\n    s = append(s, 1, 2, 3, 4)\n    fmt.Println(len(s), cap(s))\n}",
      "answers": ["4 6", "4 3", "3 3", "Паника"],
      "correctAnswerId": 0,
      "explanation": "Изначально слайс имеет емкость 3. При добавлении 4 элементов через `append` емкость увеличивается (обычно в 2 раза, до 6). Длина становится 4. Вывод: `4 6`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    arr := [3]int{1, 2, 3}\n    s := arr[1:2]\n    s = append(s, 4)\n    fmt.Println(arr)\n}",
      "answers": ["[1, 2, 3]", "[1, 2, 4]", "Паника", "[1, 4, 3]"],
      "correctAnswerId": 1,
      "explanation": "Слайс `s` ссылается на массив `arr`. `append` добавляет 4, перезаписывая элемент с индексом 2 в `arr`. Вывод: `[1, 2, 4]`."
    },
    {
      "question": "Что выведет следующий код?",
      "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    s1 := []int{1, 2}\n    s2 := []int{3, 4}\n    copy(s1, s2)\n    fmt.Println(s1)\n}",
      "answers": ["[1, 2]", "[3, 4]", "Паника", "[0, 0]"],
      "correctAnswerId": 1,
      "explanation": "`copy(s1, s2)` копирует элементы из `s2` в `s1`. Так как `s1` имеет длину 2, копируются оба элемента. Вывод: `[3, 4]`."
    }
  ]
}
